import { renderHook, act } from '@testing-library/react-hooks';

import { useBattleReducer } from './UseBattleReducer';
import { initialState, Battle, Action } from '../state';

import { handleAction } from '../state';
jest.mock('../state');

test('returns initial state', () => {
  const {
    result: { current: hookResult },
  } = renderHook<void, [Battle, React.Dispatch<Action>]>(() =>
    useBattleReducer(),
  );

  const [battle] = hookResult;

  expect(handleAction).not.toHaveBeenCalled();
  expect(battle).toEqual(initialState);
});

test('calls action handler on dispatch', () => {
  const { result } = renderHook<void, [Battle, React.Dispatch<Action>]>(() =>
    useBattleReducer(),
  );
  const [, dispatch] = result.current;

  const action: Action = {
    actionType: 'DiceRolled',
    human: [5, 3],
    monster: [1, 1],
  };
  act(() => dispatch(action));

  expect(handleAction).toHaveBeenCalledWith(initialState, action);
});

test('uses state generated by action handler', () => {
  const { result } = renderHook<void, [Battle, React.Dispatch<Action>]>(() =>
    useBattleReducer(),
  );
  const [, dispatch] = result.current;

  const action: Action = {
    actionType: 'DiceRolled',
    human: [5, 3],
    monster: [1, 1],
  };
  const generatedState: Battle = {
    human: { health: 7, lastHit: 0 },
    monster: { health: 4, lastHit: 6 },
    inProgress: true,
  };
  (handleAction as jest.Mock).mockImplementation(() => generatedState);
  act(() => dispatch(action));
  const [battle] = result.current;

  expect(battle).toEqual(generatedState);
});
